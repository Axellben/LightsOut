{"ast":null,"code":"import _slicedToArray from \"/home/alex/DEV/LearnReact/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/alex/DEV/LearnReact/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/alex/DEV/LearnReact/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/alex/DEV/LearnReact/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/alex/DEV/LearnReact/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/alex/DEV/LearnReact/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/alex/DEV/LearnReact/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var _this$props = this.props,\n          nRows = _this$props.nRows,\n          nCols = _this$props.nCols,\n          chanceLightStartsOn = _this$props.chanceLightStartsOn;\n      var board = new Array(nRows);\n\n      for (var i = 0; i < nCols; ++i) {\n        board[i] = new Array(nCols);\n      }\n\n      for (var _i = 0; _i < nRows; ++_i) {\n        for (var j = 0; j < nCols; ++j) {\n          board[_i][j] = Math.random() < chanceLightStartsOn ? true : false;\n        }\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props2 = this.props,\n          nCols = _this$props2.nCols,\n          nRows = _this$props2.nRows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          x = _coord$split$map2[0],\n          y = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < nCols && y >= 0 && y < nRows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n\n\n      flipCell(x, y);\n      flipCell(x - 1, y);\n      flipCell(x, y + 1);\n      flipCell(x + 1, y);\n      flipCell(x, y - 1); // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      var hasWon = board.reduce(function (total, elem) {\n        return total + elem;\n      }, 0) === 0;\n      console.log(hasWon);\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n  }, {\n    key: \"renderBoardBody\",\n    value: function renderBoardBody() {\n      var _this2 = this;\n\n      var boardBody = [];\n\n      for (var i = 0; i < this.props.nRows; ++i) {\n        var row = [];\n\n        var _loop = function _loop(j) {\n          var coord = \"\".concat(i, \"-\").concat(j);\n          row.push( /*#__PURE__*/React.createElement(Cell, {\n            key: coord,\n            isLit: _this2.state.board[i][j],\n            flipCellsAroundMe: function flipCellsAroundMe() {\n              return _this2.flipCellsAround(coord);\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 11\n            }\n          }));\n        };\n\n        for (var j = 0; j < this.props.nCols; ++j) {\n          _loop(j);\n        }\n\n        boardBody.push( /*#__PURE__*/React.createElement(\"tr\", {\n          key: i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 22\n          }\n        }, row));\n      }\n\n      return boardBody;\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.state.hasWon); // if the game is won, just show a winning msg & render nothing else\n\n      if (this.state.hasWon) {\n        return /*#__PURE__*/React.createElement(\"h1\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 14\n          }\n        }, \"You WON\");\n      } // make table board\n\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Board-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"neon-orange\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }\n      }, \"Lights\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"neon-blue\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }\n      }, \"Out\")), /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }\n      }, this.renderBoardBody())));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nRows: 5,\n  nCols: 5,\n  chanceLightStartsOn: 0\n};\nexport default Board;","map":{"version":3,"sources":["/home/alex/DEV/LearnReact/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","nRows","nCols","chanceLightStartsOn","Array","i","j","Math","random","coord","split","map","Number","x","y","flipCell","reduce","total","elem","console","log","setState","boardBody","row","push","flipCellsAround","renderBoardBody","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nRows: 5,\n    nCols: 5,\n    chanceLightStartsOn: 0,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard(),\n    };\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    const { nRows, nCols, chanceLightStartsOn } = this.props;\n    let board = new Array(nRows);\n    for (let i = 0; i < nCols; ++i) {\n      board[i] = new Array(nCols);\n    }\n\n    for (let i = 0; i < nRows; ++i) {\n      for (let j = 0; j < nCols; ++j) {\n        board[i][j] = Math.random() < chanceLightStartsOn ? true : false;\n      }\n    }\n\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { nCols, nRows } = this.props;\n    let board = this.state.board;\n    let [x, y] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < nCols && y >= 0 && y < nRows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n    flipCell(x, y);\n    flipCell(x - 1, y);\n    flipCell(x, y + 1);\n    flipCell(x + 1, y);\n    flipCell(x, y - 1);\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = board.reduce((total, elem) => total + elem, 0) === 0;\n    console.log(hasWon);\n\n    this.setState({ board, hasWon });\n  }\n\n  renderBoardBody() {\n    let boardBody = [];\n\n    for (let i = 0; i < this.props.nRows; ++i) {\n      let row = [];\n      for (let j = 0; j < this.props.nCols; ++j) {\n        let coord = `${i}-${j}`;\n        row.push(\n          <Cell\n            key={coord}\n            isLit={this.state.board[i][j]}\n            flipCellsAroundMe={() => this.flipCellsAround(coord)}\n          />\n        );\n      }\n      boardBody.push(<tr key={i}>{row}</tr>);\n    }\n    return boardBody;\n  }\n\n  /** Render game board or winning message. */\n\n  render() {\n    console.log(this.state.hasWon);\n    // if the game is won, just show a winning msg & render nothing else\n    if (this.state.hasWon) {\n      return <h1>You WON</h1>;\n    }\n    // make table board\n    return (\n      <div>\n        <div className=\"Board-title\">\n          <div className=\"neon-orange\">Lights</div>\n          <div className=\"neon-blue\">Out</div>\n        </div>\n        <table className=\"Board\">\n          <tbody>{this.renderBoardBody()}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}