{"ast":null,"code":"import _classCallCheck from \"/home/alex/DEV/LearnReact/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/alex/DEV/LearnReact/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/alex/DEV/LearnReact/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/alex/DEV/LearnReact/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/alex/DEV/LearnReact/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/alex/DEV/LearnReact/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var _this$props = this.props,\n          nRows = _this$props.nRows,\n          nCols = _this$props.nCols,\n          chanceLightStartsOn = _this$props.chanceLightStartsOn;\n      var board = new Array(nRows);\n\n      for (var i = 0; i < nCols; ++i) {\n        board[i] = new Array(nCols);\n      }\n\n      for (var _i = 0; _i < nRows; ++_i) {\n        for (var j = 0; j < nCols; ++j) {\n          board[_i][j] = Math.random() < chanceLightStartsOn ? true : false;\n        }\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n    // flipCellsAround(coord) {\n    //   let { nCols, nRows } = this.props;\n    //   let board = this.state.board;\n    //   let [y, x] = coord.split(\"-\").map(Number);\n    //   function flipCell(y, x) {\n    //     // if this coord is actually on board, flip it\n    //     if (x >= 0 && x < nCols && y >= 0 && y < nRows) {\n    //       board[y][x] = !board[y][x];\n    //     }\n    //   }\n    //   // TODO: flip this cell and the cells around it\n    //   // win when every cell is turned off\n    //   // TODO: determine is the game has been won\n    //   // this.setState({ board, hasWon });\n    // }\n\n  }, {\n    key: \"renderBoardBody\",\n    value: function renderBoardBody() {\n      var _this$props2 = this.props,\n          nCols = _this$props2.nCols,\n          nRows = _this$props2.nRows;\n      var board;\n      var row;\n\n      for (var i = 0; i < nRows; ++i) {\n        row = null;\n\n        for (var j = 0; j < nCols; ++j) {\n          row += /*#__PURE__*/React.createElement(Cell, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 16\n            }\n          });\n        }\n\n        board += /*#__PURE__*/React.createElement(\"trow\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 16\n          }\n        }, row);\n      }\n\n      console.log(row); // return (\n      //\n      //     <tbody>{row}</tbody>\n      // );\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 9\n        }\n      }, this.renderBoardBody()));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nRows: 5,\n  nCols: 5,\n  chanceLightStartsOn: 0.5\n};\nexport default Board;","map":{"version":3,"sources":["/home/alex/DEV/LearnReact/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","nRows","nCols","chanceLightStartsOn","Array","i","j","Math","random","row","console","log","renderBoardBody","defaultProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;IA0BMC,K;;;AAOJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,+EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,KADG;AAEXC,MAAAA,KAAK,EAAE,MAAKC,WAAL;AAFI,KAAb;AAFiB;AAMlB;AAED;;;;;kCAEc;AAAA,wBACkC,KAAKJ,KADvC;AAAA,UACJK,KADI,eACJA,KADI;AAAA,UACGC,KADH,eACGA,KADH;AAAA,UACUC,mBADV,eACUA,mBADV;AAEZ,UAAIJ,KAAK,GAAG,IAAIK,KAAJ,CAAUH,KAAV,CAAZ;;AACA,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAApB,EAA2B,EAAEG,CAA7B,EAAgC;AAC9BN,QAAAA,KAAK,CAACM,CAAD,CAAL,GAAW,IAAID,KAAJ,CAAUF,KAAV,CAAX;AACD;;AAED,WAAK,IAAIG,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGJ,KAApB,EAA2B,EAAEI,EAA7B,EAAgC;AAC9B,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAApB,EAA2B,EAAEI,CAA7B,EAAgC;AAC9BP,UAAAA,KAAK,CAACM,EAAD,CAAL,CAASC,CAAT,IAAcC,IAAI,CAACC,MAAL,KAAgBL,mBAAhB,GAAsC,IAAtC,GAA6C,KAA3D;AACD;AACF;;AAED,aAAOJ,KAAP;AACD;AAED;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;;;;sCAEkB;AAAA,yBACS,KAAKH,KADd;AAAA,UACRM,KADQ,gBACRA,KADQ;AAAA,UACDD,KADC,gBACDA,KADC;AAEhB,UAAIF,KAAJ;AACA,UAAIU,GAAJ;;AAEA,WAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAApB,EAA2B,EAAEI,CAA7B,EAAgC;AAC9BI,QAAAA,GAAG,GAAG,IAAN;;AACA,aAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAApB,EAA2B,EAAEI,CAA7B,EAAgC;AAC9BG,UAAAA,GAAG,iBAAI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACDV,QAAAA,KAAK,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAOU,GAAP,CAAT;AACD;;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAZgB,CAchB;AACA;AACA;AAEA;AACD;AAED;;;;6BAES;AACP;AACA;AACA;AACA,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA0B,KAAKG,eAAL,EAA1B,CADF,CADF;AAKD;;;;EAxFiBnB,S;;AAAdE,K,CACGkB,Y,GAAe;AACpBZ,EAAAA,KAAK,EAAE,CADa;AAEpBC,EAAAA,KAAK,EAAE,CAFa;AAGpBC,EAAAA,mBAAmB,EAAE;AAHD,C;AA0FxB,eAAeR,KAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nRows: 5,\n    nCols: 5,\n    chanceLightStartsOn: 0.5,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard(),\n    };\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    const { nRows, nCols, chanceLightStartsOn } = this.props;\n    let board = new Array(nRows);\n    for (let i = 0; i < nCols; ++i) {\n      board[i] = new Array(nCols);\n    }\n\n    for (let i = 0; i < nRows; ++i) {\n      for (let j = 0; j < nCols; ++j) {\n        board[i][j] = Math.random() < chanceLightStartsOn ? true : false;\n      }\n    }\n\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  // flipCellsAround(coord) {\n  //   let { nCols, nRows } = this.props;\n  //   let board = this.state.board;\n  //   let [y, x] = coord.split(\"-\").map(Number);\n\n  //   function flipCell(y, x) {\n  //     // if this coord is actually on board, flip it\n\n  //     if (x >= 0 && x < nCols && y >= 0 && y < nRows) {\n  //       board[y][x] = !board[y][x];\n  //     }\n  //   }\n\n  //   // TODO: flip this cell and the cells around it\n\n  //   // win when every cell is turned off\n  //   // TODO: determine is the game has been won\n\n  //   // this.setState({ board, hasWon });\n  // }\n\n  renderBoardBody() {\n    const { nCols, nRows } = this.props;\n    let board;\n    let row;\n\n    for (let i = 0; i < nRows; ++i) {\n      row = null;\n      for (let j = 0; j < nCols; ++j) {\n        row += <Cell />;\n      }\n      board += <trow>{row}</trow>;\n    }\n    console.log(row);\n\n    // return (\n    //\n    //     <tbody>{row}</tbody>\n\n    // );\n  }\n\n  /** Render game board or winning message. */\n\n  render() {\n    // if the game is won, just show a winning msg & render nothing else\n    // TODO\n    // make table board\n    return (\n      <div>\n        <table className=\"Board\">{this.renderBoardBody()}</table>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}